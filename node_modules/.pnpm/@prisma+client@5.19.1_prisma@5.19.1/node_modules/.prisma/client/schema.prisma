generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id              String            @id @default(uuid())
  customer_hash        String?
  first_name           String
  last_name            String?
  date_of_birth        DateTime?
  business_name        String?
  email                String?           @unique
  country_code         String?
  phone_no             String?           @unique
  pin                  String
  account_type         EnumAccount
  account_no           String?
  address_line_1       String?
  address_line_2       String?
  token                Json?
  invalidToken         Json?
  access_token         Json?
  country              Country?          @relation(fields: [country_id], references: [country_id])
  country_id           Int?
  state                State?            @relation(fields: [state_id], references: [state_id])
  state_id             Int?
  city                 City?             @relation(fields: [city_id], references: [city_id])
  city_id              Int?
  zip_code             String?
  role                 Role?             @relation(fields: [role_id], references: [role_id])
  role_id              String?
  noOfWrongPinAttempts Int               @default(0)
  status               EnumUserStatus?   @default(Active)
  passkey              Passkey[]
  password_history     PasswordHistory[]
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt

  @@map("user")
}

model PasswordHistory {
  hash_id         String   @id @default(uuid())
  hashed_password String
  user            User?    @relation(fields: [user_id], references: [user_id])
  user_id         String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("passwordHistory")
}

model Role {
  role_id     String        @id @default(uuid())
  role        EnumUserRole  @unique
  permissions Permissions[]
  users       User[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("role")
}

model Permissions {
  identifier  String   @id @unique
  description String?
  roles       Role[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("permission")
}

model Region {
  region_id   Int         @id
  region_name String
  subregions  Subregion[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  @@map("region")
}

model Subregion {
  subregion_id   Int       @id
  subregion_name String
  countries      Country[]
  region         Region    @relation(fields: [region_id], references: [region_id])
  region_id      Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("subregion")
}

model Country {
  country_id      Int       @id
  country_name    String
  iso3            String
  iso2            String    @unique
  emoji           String
  emojiU          String
  numeric_code    String
  phone_code      String
  capital         String
  currency        String
  currency_name   String
  currency_symbol String
  tld             String
  native          String?
  nationality     String
  latitude        String?
  longitude       String?
  bankInputs      Json[]
  states          State[]
  subregion       Subregion @relation(fields: [subregion_id], references: [subregion_id])
  subregion_id    Int
  users           User[]
  is_active       Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@map("country")
}

model State {
  state_id   Int      @id
  state_name String
  state_code String
  latitude   String?
  longitude  String?
  type       String?
  cities     City[]
  country    Country  @relation(fields: [country_id], references: [country_id])
  country_id Int
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("state")
}

model City {
  city_id    Int      @id
  city_name  String
  latitude   String?
  longitude  String?
  state      State    @relation(fields: [state_id], references: [state_id])
  state_id   Int
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("city")
}

model Passkey {
  cred_id         String   @id @default(uuid())
  cred_public_key String
  device_type     String
  credential_type String
  user            User?    @relation(fields: [user_id], references: [user_id])
  user_id         String?
  webauth_user_id String
  counter         Int
  backup_eligible Boolean  @default(true)
  backup_status   Boolean  @default(true)
  transports      String[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("passkey")
}

enum EnumMime {
  Image
  Pdf
  Document
}

enum EnumAccount {
  Individual
  Business
}

enum EnumPurpose {
  Tuition_fee
  Travel
  Hospital
  Insurance
  Living_expenses
  Rent
  Retail
  Others
  Payroll_and_pension
  Import_and_export
  Legal_fees
  Goods_purchase
}

enum EnumUserStatus {
  Active
  In_active
  Blocked
}

enum EnumUserRole {
  User
  Guest
  Admin
}

enum EnumTransactionStatus {
  Transaction_initiated
  Invoice_upload
  Recipient_picked
  Beneficiary_picked
  Payment_initiated
  Payment_pending
  Payment_successful
  Payment_failed
}

enum EnumRelationship {
  Father
  Mother
  Sister
  Brother
  Cousin
  Son
  Daughter
  Friend
  Uncle
  Aunty
  Grandmother
  Grandfather
  Sister_in_law
  Father_in_law
  Mother_in_law
  Brother_in_law
  Nephew
  Niece
  Not_applicable
  Others
}
